// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jq from "./Jq.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";

function fromElement(element) {
  if (element.TAG === "One") {
    return [element._0];
  } else {
    return element._0;
  }
}

function jsx(component, props) {
  return component(props);
}

function jsxKeyed(component, props, key, unit) {
  return component(props);
}

function array(elements) {
  return {
          TAG: "Many",
          _0: Belt_Array.flatMap(elements, (function (element) {
                  if (element.TAG === "One") {
                    return [element._0];
                  } else {
                    return element._0;
                  }
                }))
        };
}

function string(text) {
  return {
          TAG: "One",
          _0: Jq.string(text)
        };
}

function $$int(number) {
  var text = String(number);
  return {
          TAG: "One",
          _0: Jq.string(text)
        };
}

function $$float(number) {
  var text = String(number);
  return {
          TAG: "One",
          _0: Jq.string(text)
        };
}

function jsxFragment(props) {
  return Belt_Option.getWithDefault(props.children, {
              TAG: "One",
              _0: Jq.Dom.$$null()
            });
}

function make(tag, props) {
  var element = Jq.makeFromString(tag);
  var children = Belt_Option.mapWithDefault(props.children, [], fromElement);
  Jq.append(element, children);
  Belt_Option.map(props.ref, (function (ref) {
          ref.contents = element;
        }));
  Belt_Option.map(props.class, (function ($$class) {
          Jq.addClass(element, $$class);
        }));
  Belt_Option.map(props.classes, (function (classes) {
          Jq.toggleClasses(element, classes);
        }));
  Belt_Option.map(props.dependencies, (function (dependencies) {
          Belt_Array.forEach(dependencies, (function (dependency) {
                  dependency();
                }));
        }));
  Belt_Option.map(props.attributes, (function (attributes) {
          Belt_Array.forEach(attributes, (function (param) {
                  Jq.setAttribute(element, param[0], param[1]);
                }));
        }));
  return element;
}

var Make = {
  make: make
};

function jsx$1(string, props) {
  var element = make(string, props);
  return {
          TAG: "One",
          _0: element
        };
}

function jsxKeyed$1(string, props, key, unit) {
  return jsx$1(string, props);
}

var Elements = {
  jsx: jsx$1,
  jsxKeyed: jsxKeyed$1,
  jsxs: jsx$1,
  jsxsKeyed: jsxKeyed$1
};

var jsxs = jsx;

var jsxsKeyed = jsxKeyed;

export {
  fromElement ,
  jsx ,
  jsxKeyed ,
  jsxs ,
  jsxsKeyed ,
  array ,
  string ,
  $$int ,
  $$float ,
  jsxFragment ,
  Make ,
  Elements ,
}
/* Jq Not a pure module */
