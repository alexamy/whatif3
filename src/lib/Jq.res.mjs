// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";

function normalize(classes) {
  return classes.split(" ");
}

function fromObject(obj) {
  return Belt_Array.reduce(Belt_Array.map(Js_dict.entries(obj), (function (param) {
                    if (param[1]) {
                      return param[0];
                    } else {
                      return "";
                    }
                  })), "", (function (classes, $$class) {
                return classes + " " + $$class;
              }));
}

var Cn = {
  normalize: normalize,
  fromObject: fromObject
};

function make(tag) {
  return document.createElement(tag);
}

function string(text) {
  return document.createTextNode(text);
}

function fromNode(node) {
  return node;
}

function toNode(t) {
  return t;
}

function append(node, nodes) {
  Belt_Array.forEach(nodes, (function (other) {
          node.appendChild(other);
        }));
}

function appendTo(node, other) {
  other.appendChild(node);
}

function replaceWith(node, other) {
  node.parentNode.replaceChild(other, node);
}

function remove(node) {
  node.parentNode.removeChild(node);
}

function setText(node, text) {
  node.textContent = text;
}

function getText(node) {
  return node.textContent;
}

function addClass(node, classes) {
  var classes$1 = classes.split(" ");
  Caml_splice_call.spliceObjApply(node.classList, "add", [classes$1]);
}

function removeClass(node, classes) {
  var classes$1 = classes.split(" ");
  Caml_splice_call.spliceObjApply(node.classList, "remove", [classes$1]);
}

function toggleClass(node, classes, value) {
  var classes$1 = classes.split(" ");
  Belt_Array.forEach(classes$1, (function ($$class) {
          node.classList.toggle($$class, value);
        }));
}

function toggleClasses(t, classes) {
  var entries = Js_dict.entries(classes);
  Belt_Array.forEach(entries, (function (param) {
          toggleClass(t, param[0], param[1]);
        }));
}

function show(node) {
  var style = node.style;
  style.display = "initial";
}

function hide(node) {
  var style = node.style;
  style.display = "none";
}

function onClick(t, handler) {
  return Js_exn.raiseError("/home/alex/hobby/whatif3/src/lib/Jq.res:98:2048-2053 - Todo: node->Node.addEventListener(\\\"click\\\", handler)");
}

function tree(tag, children, $$class) {
  var element = document.createElement(tag);
  addClass(element, $$class);
  append(element, children);
  return element;
}

function space() {
  return document.createTextNode(" ");
}

function newline() {
  return document.createElement("br");
}

var Dom = {
  space: space,
  newline: newline
};

export {
  Cn ,
  make ,
  string ,
  fromNode ,
  toNode ,
  append ,
  appendTo ,
  replaceWith ,
  remove ,
  setText ,
  getText ,
  addClass ,
  removeClass ,
  toggleClass ,
  toggleClasses ,
  show ,
  hide ,
  onClick ,
  tree ,
  Dom ,
}
/* No side effect */
