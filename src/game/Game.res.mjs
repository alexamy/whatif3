// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as $$Screen from "./Screen.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as JsxRuntime from "react/jsx-runtime";

function useLog(msg) {
  React.useEffect((function () {
          console.log(msg);
        }), [msg]);
}

function useTick(ms) {
  var match = React.useState(function () {
        return true;
      });
  var setTick = match[1];
  React.useEffect((function () {
          var intervalId = setInterval((function () {
                  setTick(function (prev) {
                        return !prev;
                      });
                }), ms);
          return (function () {
                    clearInterval(intervalId);
                  });
        }), [
        ms,
        setTick
      ]);
  return match[0];
}

function useDisplay(options) {
  var match = React.useState(function () {
        return [];
      });
  var setLines = match[1];
  var lines = match[0];
  var match$1 = React.useState(function () {
        return 0;
      });
  var setVerticalOffset = match$1[1];
  var verticalOffset = match$1[0];
  var display = React.useMemo((function () {
          var start = (lines.length - options.height | 0) + verticalOffset | 0;
          var offset = start > 0 ? start : 0;
          return Belt_Array.slice(lines, offset, options.height);
        }), [
        lines,
        options.height,
        verticalOffset
      ]);
  var echo = function (newLine) {
    setLines(function (lines) {
          return Belt_Array.concatMany([
                      lines,
                      [newLine]
                    ]);
        });
  };
  var clear = function () {
    setLines(function (param) {
          return [];
        });
  };
  useLog(verticalOffset);
  var scroll = function (direction) {
    if (direction === "Up") {
      return setVerticalOffset(function (prev) {
                  return Math.max(prev - 1 | 0, 0);
                });
    } else {
      return setVerticalOffset(function (prev) {
                  return Math.min(prev + 1 | 0, lines.length - options.height | 0);
                });
    }
  };
  return {
          display: display,
          echo: echo,
          clear: clear,
          scroll: scroll
        };
}

var Display = {
  useDisplay: useDisplay
};

function getAllButLast(str) {
  return str.slice(0, str.length - 1 | 0);
}

function useInput(options) {
  var tick = useTick(400);
  var match = React.useState(function () {
        return false;
      });
  var setFocused = match[1];
  var match$1 = React.useState(function () {
        return "";
      });
  var setMessage = match$1[1];
  var message = match$1[0];
  var beam = tick && match[0] ? "â–ˆ" : "";
  var input = "> " + message + beam;
  var focus = function (state) {
    setFocused(function (param) {
          return state;
        });
  };
  var removeChar = function () {
    setMessage(function (prev) {
          return getAllButLast(prev);
        });
  };
  var addChar = function ($$char) {
    var isAllWidth = message.length === options.width;
    setMessage(function (prev) {
          if (isAllWidth) {
            return prev;
          } else {
            return prev + $$char;
          }
        });
  };
  var clear = function () {
    setMessage(function (param) {
          return "";
        });
  };
  return {
          message: message,
          input: input,
          focus: focus,
          removeChar: removeChar,
          addChar: addChar,
          clear: clear
        };
}

var Input = {
  getAllButLast: getAllButLast,
  useInput: useInput
};

function Game$Terminal(props) {
  var match = useDisplay({
        width: 36,
        height: 14
      });
  var scroll = match.scroll;
  var clear = match.clear;
  var echo = match.echo;
  var match$1 = useInput({
        width: 36
      });
  var clearInput = match$1.clear;
  var addChar = match$1.addChar;
  var removeChar = match$1.removeChar;
  var focus = match$1.focus;
  var message = match$1.message;
  var processMessage = function (text) {
    var message = text.trim();
    if (message === "clear") {
      return clear();
    } else if (message.length > 0) {
      return echo(message);
    } else {
      return ;
    }
  };
  var onKeyDown = function (e) {
    var key = e.key;
    switch (key) {
      case "ArrowDown" :
          return scroll("Down");
      case "ArrowUp" :
          return scroll("Up");
      case "Backspace" :
          return removeChar();
      case "Enter" :
          processMessage(message);
          return clearInput();
      default:
        if (key.length === 1) {
          return addChar(key);
        } else {
          return ;
        }
    }
  };
  var lines = Belt_Array.mapWithIndex(match.display, (function (i, line) {
          return JsxRuntime.jsx("div", {
                      children: line
                    }, String(i));
        }));
  return JsxRuntime.jsxs("div", {
              children: [
                lines,
                JsxRuntime.jsx("div", {
                      children: match$1.input
                    })
              ],
              className: "monospace outline-0 whitespace-pre text-nowrap bg-blue-400 text-gray-800 w-96 h-96 p-2 mx-2 flex flex-col justify-end",
              tabIndex: 0,
              onKeyDown: onKeyDown,
              onFocus: (function (param) {
                  focus(true);
                }),
              onBlur: (function (param) {
                  focus(false);
                }),
              onClick: (function (param) {
                  focus(true);
                })
            });
}

var Terminal = {
  useTick: useTick,
  Display: Display,
  Input: Input,
  make: Game$Terminal
};

function Game(props) {
  var match = React.useState(function () {
        return false;
      });
  var setShown = match[1];
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx($$Screen.make, {
                      content: JsxRuntime.jsx("p", {
                            children: "You are hearing strange letters: B Y M N."
                          }),
                      options: [[
                          "Go back",
                          (function () {
                              setShown(function (prev) {
                                    return !prev;
                                  });
                            })
                        ]]
                    }),
                JsxRuntime.jsx(Game$Terminal, {})
              ],
              className: "flex"
            });
}

var make = Game;

export {
  useLog ,
  Terminal ,
  make ,
}
/* react Not a pure module */
