// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Input from "./screens/Input.res.mjs";
import * as React from "react";
import * as $$Screen from "./Screen.res.mjs";
import * as Content from "./data/Content.res.mjs";
import * as Display from "./screens/Display.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__Error from "@rescript/core/src/Core__Error.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function Game$Terminal(props) {
  var match = Display.useDisplay({
        width: 36,
        height: 13
      });
  var viewport = match.viewport;
  var screen = match.screen;
  var match$1 = Input.useInput({
        width: 36
      });
  var input = match$1.input;
  var message = match$1.message;
  var match$2 = React.useState(function () {
        return "";
      });
  var processMessage = function (text) {
    var message = text.trim();
    if (message === "очистить") {
      return screen("Clear");
    } else if (message.length > 0) {
      return screen({
                  TAG: "Echo",
                  _0: message
                });
    } else {
      return ;
    }
  };
  var onKeyDown = function (e) {
    var key = e.key;
    switch (key) {
      case "ArrowDown" :
          return viewport("Down");
      case "ArrowUp" :
          return viewport("Up");
      case "Backspace" :
          return input("RemoveChar");
      case "Enter" :
          processMessage(message);
          viewport("Reset");
          return input("Clear");
      default:
        if (key.length === 1) {
          return input({
                      TAG: "AddChar",
                      _0: key
                    });
        } else {
          return ;
        }
    }
  };
  var lines = Belt_Array.mapWithIndex(match.display, (function (i, line) {
          return JsxRuntime.jsx("div", {
                      children: line
                    }, String(i));
        }));
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: "Умные часы 3000",
                      className: "text-center"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              children: lines,
                              className: "flex flex-col grow"
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                "> ",
                                JsxRuntime.jsx("span", {
                                      children: message,
                                      className: match$2[0]
                                    }),
                                match$1.beam
                              ]
                            })
                      ],
                      className: "flex flex-col"
                    })
              ],
              className: "monospace screen-w screen-h outline-0 whitespace-pre text-nowrap bg-blue-400 text-gray-800 p-2 flex flex-col justify-between",
              tabIndex: 0,
              onKeyDown: onKeyDown,
              onFocus: (function (param) {
                  input({
                        TAG: "Focus",
                        _0: true
                      });
                }),
              onBlur: (function (param) {
                  input({
                        TAG: "Focus",
                        _0: false
                      });
                }),
              onClick: (function (param) {
                  input({
                        TAG: "Focus",
                        _0: true
                      });
                })
            });
}

var Terminal = {
  make: Game$Terminal
};

function Game(props) {
  var match = React.useState(function () {
        return 0;
      });
  var setCurrent = match[1];
  var current = match[0];
  var data = React.useMemo((function () {
          return Belt_Array.get(Content.screens, current);
        }), [current]);
  var content = JsxRuntime.jsx("p", {
        children: data.description
      });
  var options = Belt_Array.map(data.options, (function (param) {
          var place = param[1];
          return [
                  param[0],
                  (function () {
                      var index = Belt_Array.getIndexBy(Content.screens, (function (screen) {
                              return screen.place === place;
                            }));
                      if (index !== undefined) {
                        return setCurrent(function (param) {
                                    return index;
                                  });
                      } else {
                        return Core__Error.panic("No next screen found");
                      }
                    })
                ];
        }));
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx($$Screen.make, {
                      content: content,
                      options: options
                    }),
                JsxRuntime.jsx(Game$Terminal, {})
              ],
              className: "flex gap-4 justify-center"
            });
}

var make = Game;

export {
  Terminal ,
  make ,
}
/* Input Not a pure module */
