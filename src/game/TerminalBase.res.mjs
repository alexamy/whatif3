// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Input from "./Input.res.mjs";
import * as React from "react";
import * as Display from "./Display.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function makeComponent(param) {
  var processMessage = param.processMessage;
  var knownCommands = param.knownCommands;
  var styleClass = param.styleClass;
  var header = param.header;
  return function (param) {
    var display = Display.useDisplay({
          width: 35,
          height: 14
        });
    var input = Input.useInput({
          width: 35
        });
    var match = React.useState(function () {
          return false;
        });
    var setHighlighted = match[1];
    var lines = display.lines.map(function (line, i) {
          return JsxRuntime.jsx("div", {
                      children: line
                    }, i.toString());
        });
    var runProcessMessage = function (text) {
      var text$1 = text.trim();
      if (text$1.length > 0) {
        return processMessage({
                    text: text$1,
                    display: display,
                    input: input
                  });
      }

    };
    var onKeyDown = function (e) {
      var key = e.key;
      Core__Option.forEach(knownCommands, (function (commands) {
              if (!(key.length === 1 || key === "Backspace")) {
                return ;
              }
              var newMessage = input.message + key;
              setHighlighted(function (param) {
                    return commands.includes(newMessage);
                  });
            }));
      switch (key) {
        case "ArrowDown" :
            return display.viewport("Down");
        case "ArrowUp" :
            return display.viewport("Up");
        case "Backspace" :
            return input.run("RemoveChar");
        case "Enter" :
            runProcessMessage(input.message);
            display.viewport("Reset");
            return input.run("Clear");
        default:
          if (key.length === 1) {
            return input.run({
                        TAG: "AddChar",
                        _0: key
                      });
          } else {
            return ;
          }
      }
    };
    return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx("div", {
                        children: header,
                        className: "text-center"
                      }),
                  JsxRuntime.jsxs("div", {
                        children: [
                          JsxRuntime.jsx("div", {
                                children: lines,
                                className: "flex flex-col grow text-md/1"
                              }),
                          JsxRuntime.jsxs("div", {
                                children: [
                                  "> ",
                                  JsxRuntime.jsx("span", {
                                        children: input.message,
                                        className: match[0] ? "bg-green-800 text-white" : ""
                                      }),
                                  input.beam
                                ],
                                className: "select-none"
                              })
                        ],
                        className: "flex flex-col"
                      })
                ],
                className: "\n      monospace screen-w screen-h\n      outline-0 whitespace-pre text-nowrap\n      p-2 flex flex-col justify-between\n      text-gray-800 " + styleClass + "\n    ",
                tabIndex: 0,
                onKeyDown: onKeyDown,
                onFocus: (function (param) {
                    input.focus("On");
                  }),
                onBlur: (function (param) {
                    input.focus("Off");
                  }),
                onClick: (function (param) {
                    input.focus("On");
                  })
              });
  };
}

export {
  makeComponent ,
}
/* Input Not a pure module */
